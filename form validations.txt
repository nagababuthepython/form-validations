step1:	 foldername:		dj7ammay
step2:	 projectname:		validatepro 
step3:	 app name:			validateapp 
step4:	 databasename:		valdb 
step5:	 configure database in settings.py file 


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'valdb',
        'USER':'root',
        'PASSWORD':'root',
    }
}

step6:	models.py file 
----------------------
from django.db import models

class RegistrationData(models.Model):
    firstname = models.CharField(max_length=20)
    lastname = models.CharField(max_length=20)
    username = models.CharField(max_length=20)
    email = models.EmailField(max_length=20)
    password1 = models.CharField(max_length=20)
    password2 = models.CharField(max_length=20)
    mobile = models.BigIntegerField()


step7:	forms.py file 
---------------------
from django import forms
from .models import RegistrationData
class RegistrationForm(forms.Form):
    firstname = forms.CharField(
        widget=forms.TextInput(
            attrs={
                'class': 'form-control',
                'placeholder': 'Enter first name'
            }
        )
    )
    lastname = forms.CharField(
        widget=forms.TextInput(
            attrs={
                'class': 'form-control',
                'placeholder': 'Enter last name'
            }
        )
    )
    username = forms.CharField(
        widget=forms.TextInput(
            attrs={
                'class' : 'form-control',
                'placeholder' : 'Enter user name'
            }
        )
    )

    email = forms.EmailField(
        widget=forms.EmailInput(
            attrs={
                'class': 'form-control',
                'placeholder': 'Enter user email'
            }
        )
    )
    password1 = forms.CharField(
        widget=forms.PasswordInput(
            attrs={
                'class': 'form-control',
                'placeholder': 'Enter your password'
            }
        )
    )
    password2 = forms.CharField(
        label='Confirm pwd',
        widget=forms.PasswordInput(
            attrs={
                'class': 'form-control',
                'placeholder': 'Enter conform password'
            }
        )
    )
    mobile = forms.IntegerField(
        widget=forms.NumberInput(
            attrs={
                'class': 'form-control',
                'placeholder': 'Enter mobile number'
            }
        )
    )

    # def clean_firstname(self):
    #     firstname = self.cleaned_data.get('firstname')
    #     if len(firstname)<=5 and len(firstname)>=10:
    #         raise forms.ValidationError("First Name Must Have more then 5 Characters ")
    #     return firstname

    def clean_username(self):
        username = self.cleaned_data.get('username')

        qs = RegistrationData.objects.filter(username=username)
        if qs.exists():
            raise forms.ValidationError("User name is taken already.")
        elif len(username)<=5:
            raise forms.ValidationError("User Name Must have more then 5 Chars")
        return username

    def clean_email(self):
        email = self.cleaned_data.get('email')
        qs = RegistrationData.objects.filter(email=email)
        if qs.exists():
            raise forms.ValidationError("Email name is taken already.")
        elif not 'gmail.com' in email:
            raise forms.ValidationError("Email has to end with gmail.com")
        return email

    def clean_mobile(self):
        mobile = self.cleaned_data.get('mobile')
        mob = RegistrationData.objects.filter(mobile=mobile)
        if mob.exists():
            raise  forms.ValidationError('Mobile Number Already Taken')
        elif len(str(mobile)) != 10:
            raise forms.ValidationError('Enter Valid Mobile Number')
        return mobile

    def clean(self):
        data = self.cleaned_data
        password1 = self.cleaned_data.get('password1')
        password2 = self.cleaned_data.get('password2')
        if password2 != password1 :
            raise forms.ValidationError("Passwords must match.")
        elif len(password1) <= 4 or len(password1) >= 15:
             raise forms.ValidationError("Password length must be more then 4 chars or less then 15")
        return data



step8:	views.py file 
---------------------
from django.shortcuts import render
from .forms import RegistrationForm
from .models import RegistrationData

def RegForm_Page(request):
    form = RegistrationForm(request.POST or None)
    context = {
        'form' : form
    }

    if form.is_valid():
        print(form.cleaned_data)

        firstname = form.cleaned_data.get('firstname')
        lastname = form.cleaned_data.get('lastname')
        username = form.cleaned_data.get('username')
        email = form.cleaned_data.get('email')
        password1 = form.cleaned_data.get('password1')
        password2 = form.cleaned_data.get('password2')
        mobile = form.cleaned_data.get('mobile')

        data = RegistrationData(
            firstname=firstname,
            lastname=lastname,
            username=username,
            email=email,
            password1=password1,
            password2=password2,
            mobile=mobile
        )
        data.save()

    return render(request,'feedback.html' , context)
	
step10: HTML FILE 
------------------
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
</head>

<style>
     form{ margin-top: 10px; background-color:#f86dff; padding: 20px; margin-left: 380px;
         width: 400px; border-radius: 50px; }
     body{ background-color: #4993ff; }
     .btn{ margin-left: 10px; }
     h1{ text-align: center; font-size: 40px; font-family: Cambria; color: red;
     }
 </style>

<body>
<h1>Form Validations</h1>
<div class="container">
    <div class="row">
        <div class="col-md-6">
              <form  method="POST">
                     {% csrf_token %}
                     {{ form }}
                     <br><br>
                     <center>
                     <input type="submit" value="Register" class="btn btn-success">
                     <input type="reset" value="Clear" class="btn btn-danger">
                     </center>
              </form>
        </div>
    </div>
</div>
</body>
</html>


step11: urls.py file 
--------------------
from django.contrib import admin
from django.conf.urls import url
from validateapp.views import RegForm_Page

urlpatterns = [
    url('admin/', admin.site.urls),
    url(r'^$',RegForm_Page)
]